<nav class="navbar">
  <div class="container">
    <a href="/" class="logo">
      <i class="fas fa-bolt"></i>
      <span>AniVerse</span>
    </a>

    <div class="nav-center">
      <ul class="nav-links">
        <li><a href="/" class="<%= currentPage === 'home' ? 'active' : '' %>"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/marketplace" class="<%= currentPage === 'marketplace' ? 'active' : '' %>"><i class="fas fa-shopping-bag"></i> Marketplace</a></li>
        <li><a href="/gamezone" class="<%= currentPage === 'gamezone' ? 'active' : '' %>"><i class="fas fa-gamepad"></i> GameZone</a></li>
        <li><a href="/betting" class="<%= currentPage === 'betting' ? 'active' : '' %>"><i class="fas fa-chart-line"></i> Betting</a></li>
        <li><a href="/redeem" class="<%= currentPage === 'redeem' ? 'active' : '' %>"><i class="fas fa-gift"></i> Redeem</a></li>
      </ul>
    </div>

    <div class="nav-right">
      <button class="search-btn" onclick="openSearchModal()">
        <i class="fas fa-search"></i>
      </button>

      <!-- Wallet Connection -->
      <div class="wallet-section">
        <!-- Updated button to show wallet address when connected -->
        <button id="connectBtn" class="wallet-btn gradient-btn" onclick="openWalletModal()">
          <i class="fas fa-wallet"></i>
          <span id="connectBtnText">Connect Wallet</span>
        </button>

        <div id="walletProfile" class="wallet-profile hidden" onclick="toggleWalletMenu()">
          <div class="profile-avatar">
            <img id="profileImage" src="https://api.dicebear.com/7.x/avataaars/svg?seed=default" alt="Profile" />
          </div>
          <div class="wallet-info">
            <span id="walletAddress" class="wallet-address"></span>
            <span class="wallet-label">Wallet Connected</span>
            <span id="walletType" class="wallet-type"></span>
          </div>
          <i class="fas fa-chevron-down dropdown-arrow"></i>
        </div>
      </div>
    </div>

    <!-- Mobile Menu Toggle -->
    <button class="mobile-menu-btn" onclick="toggleMobileMenu()">
      <span></span>
      <span></span>
      <span></span>
    </button>
  </div>

  <!-- Mobile Menu -->
  <div id="mobileMenu" class="mobile-menu">
    <a href="/"><i class="fas fa-home"></i> Home</a>
    <a href="/marketplace"><i class="fas fa-shopping-bag"></i> Marketplace</a>
    <a href="/gamezone"><i class="fas fa-gamepad"></i> GameZone</a>
    <a href="/betting"><i class="fas fa-chart-line"></i> Betting</a>
    <a href="/redeem"><i class="fas fa-gift"></i> Redeem</a>
  </div>
</nav>

<!-- Wallet Selection Modal -->
<div id="walletModal" class="wallet-modal-overlay">
  <div class="wallet-modal-content">
    <div class="wallet-modal-header">
      <h3>Connect Your Wallet</h3>
      <span class="wallet-modal-close" onclick="closeWalletModal()">&times;</span>
    </div>
    <p class="wallet-modal-subtitle">Choose your preferred wallet to connect to AniVerse</p>
    
    <div class="wallet-options">
      <!-- Freighter Wallet (Stellar) - Primary Option -->
      <button class="wallet-option primary" onclick="connectFreighter()">
        <div class="wallet-icon">
          <i class="fas fa-rocket"></i>
        </div>
        <div class="wallet-info-modal">
          <h4>Freighter Wallet</h4>
          <p>Stellar blockchain wallet - Recommended</p>
          <span class="wallet-badge">Stellar Network</span>
        </div>
        <i class="fas fa-arrow-right"></i>
      </button>

      <!-- Other Wallet Options -->
      <button class="wallet-option" onclick="connectMetaMask()">
        <div class="wallet-icon">
          <i class="fab fa-ethereum"></i>
        </div>
        <div class="wallet-info-modal">
          <h4>MetaMask</h4>
          <p>Ethereum and EVM compatible</p>
          <span class="wallet-badge">Ethereum</span>
        </div>
        <i class="fas fa-arrow-right"></i>
      </button>

      <button class="wallet-option" onclick="connectWalletConnect()">
        <div class="wallet-icon">
          <i class="fas fa-link"></i>
        </div>
        <div class="wallet-info-modal">
          <h4>WalletConnect</h4>
          <p>Connect with mobile wallets</p>
          <span class="wallet-badge">Multi-chain</span>
        </div>
        <i class="fas fa-arrow-right"></i>
      </button>

      <button class="wallet-option" onclick="connectPhantom()">
        <div class="wallet-icon">
          <i class="fas fa-ghost"></i>
        </div>
        <div class="wallet-info-modal">
          <h4>Phantom</h4>
          <p>Solana blockchain wallet</p>
          <span class="wallet-badge">Solana</span>
        </div>
        <i class="fas fa-arrow-right"></i>
      </button>
    </div>

    <div class="wallet-modal-footer">
      <p>New to crypto wallets? <a href="#" onclick="showWalletGuide()">Learn how to get started</a></p>
    </div>
  </div>
</div>

<!-- Wallet Dropdown (positioned on body) -->
<div id="walletDropdown" class="wallet-dropdown-overlay hidden">
  <div class="wallet-menu">
    <div class="menu-header">
      <div class="profile-avatar-large">
        <img id="profileImageLarge" src="https://api.dicebear.com/7.x/avataaars/svg?seed=default" alt="Profile" />
      </div>
      <div class="wallet-details">
        <span id="walletAddressFull" class="wallet-address-full"></span>
        <span id="walletTypeFull" class="wallet-type-full"></span>
        <button class="copy-btn" onclick="copyWalletAddress()">
          <i class="fas fa-copy"></i>
          Copy
        </button>
      </div>
    </div>
    <div class="menu-divider"></div>
    <div class="menu-items">
      <a href="/dashboard" class="menu-item">
        <i class="fas fa-user"></i>
        <span>My Dashboard</span>
      </a>
      <a href="/edit-profile" class="menu-item">
        <i class="fas fa-edit"></i>
        <span>Edit Profile</span>
      </a>
      <a href="/portfolio" class="menu-item">
        <i class="fas fa-chart-pie"></i>
        <span>Portfolio</span>
      </a>
      <a href="/settings" class="menu-item">
        <i class="fas fa-cog"></i>
        <span>Settings</span>
      </a>
      <div class="menu-divider"></div>
      <button class="menu-item disconnect-btn" onclick="disconnectWallet()">
        <i class="fas fa-sign-out-alt"></i>
        <span>Disconnect Wallet</span>
      </button>
    </div>
  </div>
</div>

<!-- Search Modal -->
<div id="searchModal" class="search-modal-overlay">
  <div class="search-modal-content">
    <div class="search-modal-header">
      <h3>Search AniVerse</h3>
      <span class="search-modal-close" onclick="closeSearchModal()">&times;</span>
    </div>
    <div class="search-input-container">
      <i class="fas fa-search"></i>
      <input type="text" id="globalSearch" placeholder="Search NFTs, games, or users..." oninput="performSearch(this.value)">
    </div>
    <div id="searchResults" class="search-modal-results"></div>
  </div>
</div>

<script>
  let currentWalletAddress = '';
  let currentWalletType = '';

  // Wallet Modal Functions
  function openWalletModal() {
    const modal = document.getElementById("walletModal");
    modal.style.display = "flex";
    document.body.style.overflow = "hidden";
  }

  function closeWalletModal() {
    const modal = document.getElementById("walletModal");
    modal.style.display = "none";
    document.body.style.overflow = "auto";
  }

  // Freighter Wallet Connection (Stellar)
  async function connectFreighter() {
    try {
      if (!window.freighterApi) {
        showNotification("Freighter wallet not found. Please install it to continue.", "error");
        window.open("https://www.freighter.app/", "_blank");
        return;
      }

      // Request access to Freighter wallet
      const { publicKey } = await window.freighterApi.requestAccess();
      
      if (publicKey) {
        currentWalletAddress = publicKey;
        currentWalletType = 'Freighter';
        
        // Update UI immediately with wallet address
        updateWalletUI(publicKey, 'Freighter', 'Stellar');
        closeWalletModal();

        // Store wallet info in localStorage for persistence
        localStorage.setItem('walletAddress', publicKey);
        localStorage.setItem('walletType', 'Freighter');
        localStorage.setItem('walletNetwork', 'Stellar');

        // Login with backend session
        try {
          const res = await fetch("/auth/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
              walletAddress: publicKey, 
              walletType: 'freighter',
              network: 'stellar'
            })
          });

          if (res.ok) {
            const data = await res.json();
            console.log("Freighter wallet connected and logged in:", data);
            showNotification(`Connected: ${publicKey.slice(0, 6)}...${publicKey.slice(-4)}`, "success");
            
            if (data.redirectToDashboard) {
              window.location.href = "/dashboard";
            }
          } else {
            // Even if backend login fails, show the wallet as connected
            showNotification(`Freighter connected: ${publicKey.slice(0, 6)}...${publicKey.slice(-4)}`, "success");
          }
        } catch (backendError) {
          console.error("Backend login error:", backendError);
          // Still show wallet as connected even if backend fails
          showNotification(`Freighter connected: ${publicKey.slice(0, 6)}...${publicKey.slice(-4)}`, "success");
        }
      }
    } catch (err) {
      console.error("Freighter connection error:", err);
      if (err.message.includes('User declined access')) {
        showNotification("Connection cancelled by user", "info");
      } else {
        showNotification("Failed to connect Freighter wallet. Please try again.", "error");
      }
    }
  }

  // MetaMask Connection
  async function connectMetaMask() {
    try {
      if (!window.ethereum) {
        showNotification("MetaMask not found. Please install it to continue.", "error");
        window.open("https://metamask.io/", "_blank");
        return;
      }

      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
      const walletAddress = accounts[0];
      currentWalletAddress = walletAddress;
      currentWalletType = 'MetaMask';

      updateWalletUI(walletAddress, 'MetaMask', 'Ethereum');
      closeWalletModal();

      const res = await fetch("/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          walletAddress, 
          walletType: 'metamask',
          network: 'ethereum'
        })
      });

      if (!res.ok) throw new Error("Login failed");

      const data = await res.json();
      showNotification("MetaMask connected successfully!", "success");

      if (data.redirectToDashboard) {
        window.location.href = "/dashboard";
      }

    } catch (err) {
      console.error("MetaMask connection error:", err);
      showNotification("MetaMask connection failed. Please try again.", "error");
    }
  }

  // WalletConnect (placeholder)
  async function connectWalletConnect() {
    showNotification("WalletConnect integration coming soon!", "info");
  }

  // Phantom Wallet (placeholder)
  async function connectPhantom() {
    try {
      if (!window.solana || !window.solana.isPhantom) {
        showNotification("Phantom wallet not found. Please install it to continue.", "error");
        window.open("https://phantom.app/", "_blank");
        return;
      }

      const response = await window.solana.connect();
      const publicKey = response.publicKey.toString();
      
      currentWalletAddress = publicKey;
      currentWalletType = 'Phantom';
      
      updateWalletUI(publicKey, 'Phantom', 'Solana');
      closeWalletModal();
      
      showNotification("Phantom wallet connected successfully!", "success");
    } catch (err) {
      console.error("Phantom connection error:", err);
      showNotification("Failed to connect Phantom wallet. Please try again.", "error");
    }
  }

  function updateWalletUI(walletAddress, walletType, network) {
    const profileImageUrl = `https://api.dicebear.com/7.x/avataaars/svg?seed=${walletAddress}`;
    const shortAddress = `${walletAddress.slice(0, 3)}...${walletAddress.slice(-3)}`;
    const mediumAddress = `${walletAddress.slice(0, 10)}...${walletAddress.slice(-6)}`;

    // Update connect button to show wallet address
    document.getElementById("connectBtnText").textContent = shortAddress;
    document.getElementById("connectBtn").onclick = toggleWalletMenu;
    
    // Show wallet profile for dropdown menu
    document.getElementById("walletProfile").classList.remove("hidden");

    document.getElementById("profileImage").src = profileImageUrl;
    document.getElementById("profileImageLarge").src = profileImageUrl;
    document.getElementById("walletAddress").textContent = shortAddress;
    document.getElementById("walletAddressFull").textContent = mediumAddress;
    document.getElementById("walletType").textContent = walletType;
    document.getElementById("walletTypeFull").textContent = `${walletType} • ${network}`;
  }

  // Updated disconnectWallet to reset connect button to original state
  function disconnectWallet() {
    // Clear localStorage
    localStorage.removeItem('walletAddress');
    localStorage.removeItem('walletType');
    localStorage.removeItem('walletNetwork');
    
    fetch("/auth/logout").then(() => {
      currentWalletAddress = '';
      currentWalletType = '';
      document.getElementById("connectBtnText").textContent = "Connect Wallet";
      document.getElementById("connectBtn").onclick = openWalletModal;
      document.getElementById("walletProfile").classList.add("hidden");
      document.getElementById("walletDropdown").classList.add("hidden");
      document.querySelector(".dropdown-arrow")?.classList.remove("rotated");

      showNotification("Wallet disconnected", "info");
    }).catch(() => {
      currentWalletAddress = '';
      currentWalletType = '';
      document.getElementById("connectBtnText").textContent = "Connect Wallet";
      document.getElementById("connectBtn").onclick = openWalletModal;
      document.getElementById("walletProfile").classList.add("hidden");
      document.getElementById("walletDropdown").classList.add("hidden");
      document.querySelector(".dropdown-arrow")?.classList.remove("rotated");
      
      showNotification("Wallet disconnected", "info");
    });
  }

  async function checkWalletConnection() {
    // Check localStorage for previous connection
    const savedAddress = localStorage.getItem('walletAddress');
    const savedType = localStorage.getItem('walletType');
    const savedNetwork = localStorage.getItem('walletNetwork');

    if (savedAddress && savedType === 'Freighter') {
      // Verify Freighter is still connected
      if (window.freighterApi) {
        try {
          const { publicKey } = await window.freighterApi.getPublicKey();
          if (publicKey === savedAddress) {
            currentWalletAddress = publicKey;
            currentWalletType = 'Freighter';
            updateWalletUI(publicKey, 'Freighter', 'Stellar');
            return;
          }
        } catch (err) {
          // Freighter not connected anymore, clear localStorage
          localStorage.removeItem('walletAddress');
          localStorage.removeItem('walletType');
          localStorage.removeItem('walletNetwork');
        }
      }
    }
    
    // Check for new Freighter connection
    if (window.freighterApi && !currentWalletAddress) {
      try {
        const { publicKey } = await window.freighterApi.getPublicKey();
        if (publicKey) {
          currentWalletAddress = publicKey;
          currentWalletType = 'Freighter';
          updateWalletUI(publicKey, 'Freighter', 'Stellar');
          
          // Save to localStorage
          localStorage.setItem('walletAddress', publicKey);
          localStorage.setItem('walletType', 'Freighter');
          localStorage.setItem('walletNetwork', 'Stellar');
        }
      } catch (err) {
        // Freighter not connected
      }
    }
    
    // Check MetaMask if no Freighter connection
    if (window.ethereum && !currentWalletAddress) {
      try {
        const accounts = await ethereum.request({ method: "eth_accounts" });
        if (accounts.length > 0) {
          currentWalletAddress = accounts[0];
          currentWalletType = 'MetaMask';
          updateWalletUI(currentWalletAddress, 'MetaMask', 'Ethereum');
        }
      } catch (err) {
        console.error("Wallet check failed:", err);
      }
    }
  }

  function toggleWalletMenu() {
    const walletDropdown = document.getElementById("walletDropdown");
    const walletProfile = document.getElementById("walletProfile");
    const dropdownArrow = document.querySelector(".dropdown-arrow");

    const rect = walletProfile.getBoundingClientRect();
    const walletMenu = walletDropdown.querySelector(".wallet-menu");
    walletMenu.style.position = "absolute";
    walletMenu.style.top = (rect.bottom + 10) + "px";
    walletMenu.style.right = (window.innerWidth - rect.right) + "px";
    walletMenu.style.zIndex = "99999";

    walletDropdown.classList.toggle("hidden");
    dropdownArrow.classList.toggle("rotated");
  }

  function copyWalletAddress() {
    if (!currentWalletAddress) return;

    navigator.clipboard.writeText(currentWalletAddress).then(() => {
      showNotification("Wallet address copied!", "success");
      const copyBtn = document.querySelector(".copy-btn");
      const originalHTML = copyBtn.innerHTML;
      copyBtn.innerHTML = `<i class="fas fa-check"></i> Copied!`;
      copyBtn.style.background = "#10b981";

      setTimeout(() => {
        copyBtn.innerHTML = originalHTML;
        copyBtn.style.background = "";
      }, 2000);
    }).catch(() => {
      showNotification("Failed to copy address", "error");
    });
  }

  function showWalletGuide() {
    closeWalletModal();
    showNotification("Opening wallet setup guide...", "info");
    // You can redirect to a guide page or open a tutorial modal
    window.open("/wallet-guide", "_blank");
  }

  function toggleMobileMenu() {
    document.getElementById("mobileMenu").classList.toggle("open");
  }

  function openSearchModal() {
    const modal = document.getElementById("searchModal");
    modal.style.display = "flex";
    document.body.style.overflow = "hidden";
    setTimeout(() => document.getElementById("globalSearch").focus(), 100);
  }

  function closeSearchModal() {
    const modal = document.getElementById("searchModal");
    modal.style.display = "none";
    document.body.style.overflow = "auto";
    document.getElementById("globalSearch").value = "";
    document.getElementById("searchResults").innerHTML = "";
  }

  function performSearch(value) {
    const results = document.getElementById("searchResults");
    results.innerHTML = value.trim()
      ? `<p>Searching for: <strong>${value}</strong></p>`
      : "";
  }

  function showNotification(message, type = "info") {
    const existing = document.querySelector(".notification");
    if (existing) existing.remove();

    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <i class="fas fa-${type === "success" ? "check-circle" : type === "error" ? "exclamation-circle" : "info-circle"}"></i>
      <span>${message}</span>
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add("show"), 100);
    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => notification.remove(), 300);
    }, 4000);
  }

  // Close modals on outside click
  document.addEventListener("click", (event) => {
    const walletSection = document.querySelector(".wallet-section");
    const walletDropdown = document.getElementById("walletDropdown");
    const walletModal = document.getElementById("walletModal");
    
    if (!walletSection.contains(event.target)) {
      walletDropdown.classList.add("hidden");
      document.querySelector(".dropdown-arrow")?.classList.remove("rotated");
    }

    if (event.target === walletModal) {
      closeWalletModal();
    }
  });

  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") {
      closeSearchModal();
      closeWalletModal();
      document.getElementById("walletDropdown").classList.add("hidden");
      document.querySelector(".dropdown-arrow")?.classList.remove("rotated");
    }
  });

  document.addEventListener('DOMContentLoaded', function() {
    checkWalletConnection();
    
    // Listen for Freighter account changes
    if (window.freighterApi) {
      window.freighterApi.on('accountChanged', (publicKey) => {
        if (publicKey && currentWalletType === 'Freighter') {
          currentWalletAddress = publicKey;
          updateWalletUI(publicKey, 'Freighter', 'Stellar');
          localStorage.setItem('walletAddress', publicKey);
          showNotification("Freighter account changed", "info");
        }
      });
    }
  });
</script>

<style>
.nav-right {
  display: flex;
  align-items: center;
  gap: 1rem;
}
    
.search-btn {
  background: linear-gradient(135deg, #a855f7, #7c3aed);
  border: none;
  color: white;
  padding: 0.75rem;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 45px;
  height: 45px;
  box-shadow: 0 4px 15px rgba(168, 85, 247, 0.3);
  flex-shrink: 0;
}

.search-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 6px 20px rgba(168, 85, 247, 0.4);
}

.search-btn i {
  font-size: 16px;
}

/* Wallet Section Styles */
.wallet-section {
  position: relative;
}

.wallet-profile {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  padding: 3px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  min-width: 220px;
}

.wallet-profile:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: translateY(-1px);
}

.wallet-profile.hidden {
  display: none;
}

.profile-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  overflow: hidden;
  border: 2px solid rgba(168, 85, 247, 0.5);
  flex-shrink: 0;
}

.profile-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.wallet-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.wallet-address {
  color: #ffffff;
  font-weight: 600;
  font-size: 0.9rem;
}

.wallet-label {
  color: #a1a1aa;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.wallet-type {
  color: #a855f7;
  font-size: 0.7rem;
  font-weight: 500;
}

.dropdown-arrow {
  color: #a1a1aa;
  font-size: 0.75rem;
  transition: transform 0.3s ease;
}

.dropdown-arrow.rotated {
  transform: rotate(180deg);
}

/* Wallet Modal Styles */
.wallet-modal-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(5px);
  z-index: 999999;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.wallet-modal-content {
  background: linear-gradient(135deg, #1e293b 0%, #4c1d95 50%, #1e293b 100%);
  border-radius: 20px;
  padding: 2rem;
  width: 100%;
  max-width: 500px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
  border: 1px solid rgba(255, 255, 255, 0.1);
  position: relative;
  animation: modalSlideIn 0.3s ease;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translateY(-20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.wallet-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.wallet-modal-header h3 {
  margin: 0;
  color: #ffffff;
  font-size: 1.5rem;
  font-weight: 700;
}

.wallet-modal-close {
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  color: #9ca3af;
  transition: color 0.3s ease;
  padding: 0.25rem;
  line-height: 1;
}

.wallet-modal-close:hover {
  color: #ffffff;
}

.wallet-modal-subtitle {
  color: #a1a1aa;
  margin: 0 0 2rem 0;
  font-size: 0.9rem;
}

.wallet-options {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.wallet-option {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.25rem;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  width: 100%;
}

.wallet-option:hover {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(168, 85, 247, 0.5);
  transform: translateY(-2px);
}

.wallet-option.primary {
  background: linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(124, 58, 237, 0.2));
  border: 1px solid rgba(168, 85, 247, 0.4);
}

.wallet-option.primary:hover {
  background: linear-gradient(135deg, rgba(168, 85, 247, 0.3), rgba(124, 58, 237, 0.3));
  border-color: rgba(168, 85, 247, 0.6);
}

.wallet-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  background: linear-gradient(135deg, #a855f7, #7c3aed);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
  flex-shrink: 0;
}

.wallet-info-modal {
  flex: 1;
}

.wallet-info-modal h4 {
  margin: 0 0 0.25rem 0;
  color: #ffffff;
  font-size: 1.1rem;
  font-weight: 600;
}

.wallet-info-modal p {
  margin: 0 0 0.5rem 0;
  color: #a1a1aa;
  font-size: 0.85rem;
}

.wallet-badge {
  display: inline-block;
  background: rgba(168, 85, 247, 0.2);
  color: #a855f7;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
  border: 1px solid rgba(168, 85, 247, 0.3);
}

.wallet-option i:last-child {
  color: #a1a1aa;
  font-size: 16px;
  transition: transform 0.3s ease;
}

.wallet-option:hover i:last-child {
  transform: translateX(4px);
  color: #a855f7;
}

.wallet-modal-footer {
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  text-align: center;
}

.wallet-modal-footer p {
  margin: 0;
  color: #a1a1aa;
  font-size: 0.85rem;
}

.wallet-modal-footer a {
  color: #a855f7;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

.wallet-modal-footer a:hover {
  color: #ffffff;
}

/* Wallet Dropdown Overlay - Positioned on Body */
.wallet-dropdown-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: transparent;
  z-index: 999998;
  pointer-events: none;
}

.wallet-dropdown-overlay.hidden {
  display: none;
}

.wallet-dropdown-overlay .wallet-menu {
  pointer-events: all;
  background: linear-gradient(135deg, #1e293b 0%, #4c1d95 50%, #1e293b 100%);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
  width: 300px;
  max-width: 300px;
  animation: slideDown 0.3s ease;
  backdrop-filter: blur(10px);
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.menu-header {
  padding: 1.5rem;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  gap: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.profile-avatar-large {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  overflow: hidden;
  border: 3px solid rgba(168, 85, 247, 0.5);
  flex-shrink: 0;
}

.profile-avatar-large img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.wallet-details {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.wallet-address-full {
  color: #e2e8f0;
  font-size: 0.8rem;
  font-family: 'Courier New', monospace;
  word-break: break-all;
  max-width: 180px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.wallet-type-full {
  color: #a855f7;
  font-size: 0.75rem;
  font-weight: 500;
}

.copy-btn {
  background: rgba(168, 85, 247, 0.3);
  border: 1px solid rgba(168, 85, 247, 0.4);
  color: #a855f7;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.75rem;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.25rem;
  align-self: flex-start;
}

.copy-btn:hover {
  background: rgba(168, 85, 247, 0.4);
  border-color: rgba(168, 85, 247, 0.6);
  transform: translateY(-1px);
}

.menu-divider {
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
  margin: 0;
}

.menu-items {
  padding: 0.5rem 0;
  background: rgba(0, 0, 0, 0.2);
}

.menu-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1.5rem;
  color: #e2e8f0;
  text-decoration: none;
  transition: all 0.3s ease;
  border: none;
  background: none;
  width: 100%;
  cursor: pointer;
  font-size: 0.9rem;
  font-family: inherit;
}

.menu-item:hover {
  background: rgba(168, 85, 247, 0.2);
  color: #ffffff;
  transform: translateX(4px);
}

.menu-item i {
  width: 16px;
  text-align: center;
  color: #a855f7;
  transition: color 0.3s ease;
}

.menu-item:hover i {
  color: #ffffff;
}

.disconnect-btn {
  color: #ef4444 !important;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  margin-top: 0.5rem;
  padding-top: 1rem;
}

.disconnect-btn i {
  color: #ef4444 !important;
}

.disconnect-btn:hover {
  background: rgba(239, 68, 68, 0.2) !important;
  color: #ffffff !important;
}

.disconnect-btn:hover i {
  color: #ffffff !important;
}

/* Notification Styles */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  background: rgba(30, 41, 59, 0.95);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  padding: 1rem 1.5rem;
  color: white;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  z-index: 10000;
  transform: translateX(400px);
  opacity: 0;
  transition: all 0.3s ease;
  max-width: 300px;
}

.notification.show {
  transform: translateX(0);
  opacity: 1;
}

.notification-success {
  border-left: 4px solid #10b981;
}

.notification-error {
  border-left: 4px solid #ef4444;
}

.notification-info {
  border-left: 4px solid #3b82f6;
}

.notification i {
  font-size: 1.25rem;
}

.notification-success i {
  color: #10b981;
}

.notification-error i {
  color: #ef4444;
}

.notification-info i {
  color: #3b82f6;
}

/* Search Modal Styles */
.search-modal-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(5px);
  z-index: 999999;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.search-modal-content {
  background: linear-gradient(135deg, #1e293b 0%, #4c1d95 50%, #1e293b 100%);
  border-radius: 20px;
  padding: 2rem;
  width: 100%;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
  border: 1px solid rgba(255, 255, 255, 0.1);
  position: relative;
}

.search-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.search-modal-header h3 {
  margin: 0;
  color: #ffffff;
  font-size: 1.5rem;
  font-weight: 700;
}

.search-modal-close {
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  color: #9ca3af;
  transition: color 0.3s ease;
  padding: 0.25rem;
  line-height: 1;
}

.search-modal-close:hover {
  color: #ffffff;
}

.search-input-container {
  position: relative;
  margin-bottom: 1.5rem;
}

.search-input-container i {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 16px;
}

.search-input-container input {
  width: 100%;
  padding: 1rem 1rem 1rem 2.5rem;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  color: white;
  font-size: 1rem;
  outline: none;
  transition: all 0.3s ease;
}

.search-input-container input:focus {
  border-color: #a855f7;
  box-shadow: 0 0 0 3px rgba(168, 85, 247, 0.2);
}

.search-input-container input::placeholder {
  color: #9ca3af;
}

.search-modal-results {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
  padding: 1rem;
  min-height: 100px;
  max-height: 300px;
  overflow-y: auto;
}

.search-modal-results p {
  color: #e2e8f0;
  margin: 0;
  font-size: 0.9rem;
}

.search-modal-results strong {
  color: #a855f7;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .wallet-modal-content {
    margin: 1rem;
    padding: 1.5rem;
  }
  
  .wallet-dropdown-overlay .wallet-menu {
    width: 280px;
    max-width: 280px;
    margin: 0 1rem;
  }
  
  .notification {
    right: 10px;
    left: 10px;
    max-width: none;
    transform: translateY(-100px);
  }
  
  .notification.show {
    transform: translateY(0);
  }
  
  .wallet-profile {
    min-width: 180px;
    padding: 0.75rem;
  }
  
  .wallet-info {
    gap: 0.125rem;
  }
  
  .wallet-address {
    font-size: 0.8rem;
  }
  
  .wallet-label {
    font-size: 0.7rem;
  }
  
  .wallet-type {
    font-size: 0.65rem;
  }
  
  .wallet-address-full {
    max-width: 140px;
  }
  
  .wallet-option {
    padding: 1rem;
  }
  
  .wallet-icon {
    width: 40px;
    height: 40px;
    font-size: 18px;
  }
}
</style>
